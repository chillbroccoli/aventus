generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  projects Project[]

  @@map("tags")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  avatar    String?
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  projects  Project[]
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]

  @@map("users")
}

model Project {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String     @unique
  description String     @db.Text
  content     String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  tags        Tag[]
  comments    Comment[]
  likes       Like[]
  bookmarks   Bookmark[]

  @@index([slug])
  @@map("projects")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  @@map("likes")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  @@map("bookmarks")
}

enum Role {
  ADMIN
  USER
}
